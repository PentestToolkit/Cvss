using System;
using Xunit;

namespace PentestToolkit.Cvss.Tests
{
    public static class CvssV3BaseScoreTests
    {
        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void BaseScore_correctly_calculated(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Act
            var score = cvssV3BaseScore.Score;

            // Assert
            Assert.Equal(double.Parse(nvdData.CvssV3BaseScore), score);
        }

        [Theory]
        [InlineData(nameof(CvssV3BaseScore.AttackVector))]
        [InlineData(nameof(CvssV3BaseScore.AttackComplexity))]
        [InlineData(nameof(CvssV3BaseScore.PrivilegesRequired))]
        [InlineData(nameof(CvssV3BaseScore.UserInteraction))]
        [InlineData(nameof(CvssV3BaseScore.Scope))]
        [InlineData(nameof(CvssV3BaseScore.Confidentiality))]
        [InlineData(nameof(CvssV3BaseScore.Integrity))]
        [InlineData(nameof(CvssV3BaseScore.Availability))]
        public static void BaseScore_returns_minus_one_when_missing_required_metric(string propertyName)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore = CvssV3BaseScore.FromVectorString("CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N");
            var propertyInfo = cvssV3BaseScore.GetType().GetProperty(propertyName);
            propertyInfo.SetValue(cvssV3BaseScore, null);

            // Act
            var score = cvssV3BaseScore.Score;

            // Assert
            Assert.Equal(-1.0, score);
        }

        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void FromVectorString_sets_AttackComplexity(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore;

            // Act
            cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV3AttackComplexity, cvssV3BaseScore.AttackComplexity.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void FromVectorString_sets_AttackVector(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore;

            // Act
            cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV3AttackVector, cvssV3BaseScore.AttackVector.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void FromVectorString_sets_Availability(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore;

            // Act
            cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV3AvailabilityImpact, cvssV3BaseScore.Availability.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void FromVectorString_sets_Confidentiality(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore;

            // Act
            cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV3ConfidentialityImpact, cvssV3BaseScore.Confidentiality.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void FromVectorString_sets_Integrity(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore;

            // Act
            cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV3IntegrityImpact, cvssV3BaseScore.Integrity.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void FromVectorString_sets_PrivilegesRequired(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore;

            // Act
            cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV3PrivilegesRequired, cvssV3BaseScore.PrivilegesRequired.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void FromVectorString_sets_Scope(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore;

            // Act
            cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV3Scope, cvssV3BaseScore.Scope.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void FromVectorString_sets_UserInteraction(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore;

            // Act
            cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV3UserInteraction, cvssV3BaseScore.UserInteraction.ToString().ToUpperInvariant());
        }

        [Theory]
        [InlineData("CVSS:3.0/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N")]
        [InlineData("CVSS:3.0/AV:N/PR:N/UI:N/S:U/C:N/I:L/A:N")]
        [InlineData("CVSS:3.0/AV:N/AC:L/UI:N/S:U/C:N/I:L/A:N")]
        [InlineData("CVSS:3.0/AV:N/AC:L/PR:N/S:U/C:N/I:L/A:N")]
        [InlineData("CVSS:3.0/AV:N/AC:L/PR:N/UI:N/C:N/I:L/A:N")]
        [InlineData("CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/I:L/A:N")]
        [InlineData("CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/A:N")]
        [InlineData("CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L")]
        public static void FromVectorString_throws_if_does_contain_all_required_metrics(string vectorString)
        {
            // Arrange
            Exception exception;

            // Act
            exception = Record.Exception(() => CvssV3BaseScore.FromVectorString(vectorString));

            // Assert
            Assert.NotNull(exception);
            Assert.IsType<ArgumentException>(exception);
        }

        [Theory]
        [InlineData("test")]
        [InlineData("CVSS:3.0/XX:X")]
        [InlineData("CVSS:3.0/AV:x/AC:x/PR:x/UI:x/S:x/C:x/I:x/A:x")]
        public static void FromVectorString_throws_if_does_not_match_validation_regex(string vectorString)
        {
            // Arrange
            Exception exception;

            // Act
            exception = Record.Exception(() => CvssV3BaseScore.FromVectorString(vectorString));

            // Assert
            Assert.NotNull(exception);
            Assert.IsType<ArgumentException>(exception);
        }

        [Fact]
        public static void FromVectorString_throws_if_empty()
        {
            // Arrange
            Exception exception;

            // Act
            exception = Record.Exception(() => CvssV3BaseScore.FromVectorString(""));

            // Assert
            Assert.NotNull(exception);
            Assert.IsType<ArgumentException>(exception);
        }

        [Fact]
        public static void FromVectorString_throws_if_null()
        {
            // Arrange
            Exception exception;

            // Act
            exception = Record.Exception(() => CvssV3BaseScore.FromVectorString(null));

            // Assert
            Assert.NotNull(exception);
            Assert.IsType<ArgumentNullException>(exception);
        }

        [Fact]
        public static void FromVectorString_throws_if_whitespace()
        {
            // Arrange
            Exception exception;

            // Act
            exception = Record.Exception(() => CvssV3BaseScore.FromVectorString("   "));

            // Assert
            Assert.NotNull(exception);
            Assert.IsType<ArgumentException>(exception);
        }

        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void Severity_correctly_calculated(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Act
            var severity = cvssV3BaseScore.Severity;

            // Assert
            Assert.Equal(nvdData.CvssV3BaseSeverity, severity.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV3NvdTestDataGenerator))]
        public static void ToVectorString_matches(NvdData nvdData)
        {
            // Arrange
            CvssV3BaseScore cvssV3BaseScore = CvssV3BaseScore.FromVectorString(nvdData.CvssV3VectorString);

            // Act
            var vectorString = cvssV3BaseScore.ToVectorString();

            // Assert
            Assert.Equal(nvdData.CvssV3VectorString, vectorString);
        }
    }
}
