using System;
using Xunit;

namespace PentestToolkit.Cvss.Tests
{
    public static class CvssV2BaseScoreTests
    {
        [Theory]
        [ClassData(typeof(CvssV2NvdTestDataGenerator))]
        public static void BaseScore_correctly_calculated(NvdData nvdData)
        {
            // Arrange
            CvssV2BaseScore cvssV2BaseScore = CvssV2BaseScore.FromVectorString(nvdData.CvssV2VectorString);

            // Act
            var score = cvssV2BaseScore.BaseScore;

            // Assert
            Assert.Equal(double.Parse(nvdData.CvssV2BaseScore), score);
        }

        [Theory]
        [InlineData(nameof(CvssV2BaseScore.AccessVector))]
        [InlineData(nameof(CvssV2BaseScore.AccessComplexity))]
        [InlineData(nameof(CvssV2BaseScore.Authentication))]
        [InlineData(nameof(CvssV2BaseScore.ConfidentialityImpact))]
        [InlineData(nameof(CvssV2BaseScore.IntegrityImpact))]
        [InlineData(nameof(CvssV2BaseScore.AvailabilityImpact))]
        public static void BaseScore_returns_minus_one_when_missing_required_metric(string propertyName)
        {
            // Arrange
            CvssV2BaseScore cvssV3BaseScore = CvssV2BaseScore.FromVectorString("(AV:N/AC:L/Au:N/C:N/I:P/A:P)");
            var propertyInfo = cvssV3BaseScore.GetType().GetProperty(propertyName);
            propertyInfo.SetValue(cvssV3BaseScore, null);

            // Act
            var score = cvssV3BaseScore.BaseScore;

            // Assert
            Assert.Equal(-1.0, score);
        }

        [Theory]
        [ClassData(typeof(CvssV2NvdTestDataGenerator))]
        public static void FromVectorString_sets_AccessComplexity(NvdData nvdData)
        {
            // Arrange
            CvssV2BaseScore cvssV2BaseScore;

            // Act
            cvssV2BaseScore = CvssV2BaseScore.FromVectorString(nvdData.CvssV2VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV2AccessComplexity, cvssV2BaseScore.AccessComplexity.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV2NvdTestDataGenerator))]
        public static void FromVectorString_sets_AccessVector(NvdData nvdData)
        {
            // Arrange
            CvssV2BaseScore cvssV2BaseScore;

            // Act
            cvssV2BaseScore = CvssV2BaseScore.FromVectorString(nvdData.CvssV2VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV2AccessVector, cvssV2BaseScore.AccessVector.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV2NvdTestDataGenerator))]
        public static void FromVectorString_sets_Authentication(NvdData nvdData)
        {
            // Arrange
            CvssV2BaseScore cvssV2BaseScore;

            // Act
            cvssV2BaseScore = CvssV2BaseScore.FromVectorString(nvdData.CvssV2VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV2Authentication, cvssV2BaseScore.Authentication.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV2NvdTestDataGenerator))]
        public static void FromVectorString_sets_AvailabilityImpact(NvdData nvdData)
        {
            // Arrange
            CvssV2BaseScore cvssV2BaseScore;

            // Act
            cvssV2BaseScore = CvssV2BaseScore.FromVectorString(nvdData.CvssV2VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV2AvailabilityImpact, cvssV2BaseScore.AvailabilityImpact.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV2NvdTestDataGenerator))]
        public static void FromVectorString_sets_ConfidentialityImpact(NvdData nvdData)
        {
            // Arrange
            CvssV2BaseScore cvssV2BaseScore;

            // Act
            cvssV2BaseScore = CvssV2BaseScore.FromVectorString(nvdData.CvssV2VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV2ConfidentialityImpact, cvssV2BaseScore.ConfidentialityImpact.ToString().ToUpperInvariant());
        }

        [Theory]
        [ClassData(typeof(CvssV2NvdTestDataGenerator))]
        public static void FromVectorString_sets_IntegrityImpact(NvdData nvdData)
        {
            // Arrange
            CvssV2BaseScore cvssV2BaseScore;

            // Act
            cvssV2BaseScore = CvssV2BaseScore.FromVectorString(nvdData.CvssV2VectorString);

            // Assert
            Assert.Equal(nvdData.CvssV2IntegrityImpact, cvssV2BaseScore.IntegrityImpact.ToString().ToUpperInvariant());
        }

        [Theory]
        [InlineData("(AC:L/Au:N/C:N/I:P/A:P)")]
        [InlineData("(AV:N/Au:N/C:N/I:P/A:P)")]
        [InlineData("(AV:N/AC:L/C:N/I:P/A:P)")]
        [InlineData("(AV:N/AC:L/Au:N/I:P/A:P)")]
        [InlineData("(AV:N/AC:L/Au:N/C:N/A:P)")]
        [InlineData("(AV:N/AC:L/Au:N/C:N/I:P)")]
        public static void FromVectorString_throws_if_does_contain_all_required_metrics(string vectorString)
        {
            // Arrange
            Exception exception;

            // Act
            exception = Record.Exception(() => CvssV2BaseScore.FromVectorString(vectorString));

            // Assert
            Assert.NotNull(exception);
            Assert.IsType<ArgumentException>(exception);
        }

        [Fact]
        public static void FromVectorString_throws_if_empty()
        {
            // Arrange
            Exception exception;

            // Act
            exception = Record.Exception(() => CvssV2BaseScore.FromVectorString(""));

            // Assert
            Assert.NotNull(exception);
            Assert.IsType<ArgumentException>(exception);
        }

        [Fact]
        public static void FromVectorString_throws_if_null()
        {
            // Arrange
            Exception exception;

            // Act
            exception = Record.Exception(() => CvssV2BaseScore.FromVectorString(null));

            // Assert
            Assert.NotNull(exception);
            Assert.IsType<ArgumentNullException>(exception);
        }

        [Fact]
        public static void FromVectorString_throws_if_whitespace()
        {
            // Arrange
            Exception exception;

            // Act
            exception = Record.Exception(() => CvssV2BaseScore.FromVectorString("   "));

            // Assert
            Assert.NotNull(exception);
            Assert.IsType<ArgumentException>(exception);
        }

        [Theory]
        [ClassData(typeof(CvssV2NvdTestDataGenerator))]
        public static void ToVectorString_matches(NvdData nvdData)
        {
            // Arrange
            CvssV2BaseScore cvssV2BaseScore = CvssV2BaseScore.FromVectorString(nvdData.CvssV2VectorString);

            // Act
            var vectorString = cvssV2BaseScore.ToVectorString();

            // Assert
            Assert.Equal(nvdData.CvssV2VectorString, vectorString);
        }
    }
}
