using Newtonsoft.Json;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

namespace PentestToolkit.Cvss.Tests
{
#pragma warning disable CA1812 // Avoid uninstantiated internal classes

    internal abstract class NvdTestDataGenerator : IEnumerable<object[]>
#pragma warning restore CA1812 // Avoid uninstantiated internal classes
    {
        protected static List<object[]> _data;

        public abstract IEnumerator<object[]> GetEnumerator();

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        protected static List<object[]> CreateData()
        {
            var data = new List<object[]>();

            using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream($"{nameof(PentestToolkit)}.{nameof(Cvss)}.{nameof(Tests)}.nvdcve-1.0-recent.json"))
            using (var reader = new StreamReader(stream))
            using (var jsonReader = new JsonTextReader(reader))
            {
                var serializer = new JsonSerializer();
                dynamic jObject = serializer.Deserialize(jsonReader);
                foreach (var cve in jObject.CVE_Items)
                {
                    var nvdData = new NvdData
                    {
                        CvssV3VectorString = cve?.impact?.baseMetricV3?.cvssV3?.vectorString,
                        CvssV3AttackVector = cve?.impact?.baseMetricV3?.cvssV3?.attackVector,
                        CvssV3AttackComplexity = cve?.impact?.baseMetricV3?.cvssV3?.attackComplexity,
                        CvssV3PrivilegesRequired = cve?.impact?.baseMetricV3?.cvssV3?.privilegesRequired,
                        CvssV3UserInteraction = cve?.impact?.baseMetricV3?.cvssV3?.userInteraction,
                        CvssV3Scope = cve?.impact?.baseMetricV3?.cvssV3?.scope,
                        CvssV3ConfidentialityImpact = cve?.impact?.baseMetricV3?.cvssV3?.confidentialityImpact,
                        CvssV3IntegrityImpact = cve?.impact?.baseMetricV3?.cvssV3?.integrityImpact,
                        CvssV3AvailabilityImpact = cve?.impact?.baseMetricV3?.cvssV3?.availabilityImpact,
                        CvssV3BaseScore = cve?.impact?.baseMetricV3?.cvssV3?.baseScore,
                        CvssV3BaseSeverity = cve?.impact?.baseMetricV3?.cvssV3?.baseSeverity,

                        CvssV2VectorString = cve?.impact?.baseMetricV2?.cvssV2?.vectorString,
                        CvssV2AccessVector = cve?.impact?.baseMetricV2?.cvssV2?.accessVector,
                        CvssV2AccessComplexity = cve?.impact?.baseMetricV2?.cvssV2?.accessComplexity,
                        CvssV2Authentication = cve?.impact?.baseMetricV2?.cvssV2?.authentication,
                        CvssV2ConfidentialityImpact = cve?.impact?.baseMetricV2?.cvssV2?.confidentialityImpact,
                        CvssV2IntegrityImpact = cve?.impact?.baseMetricV2?.cvssV2?.integrityImpact,
                        CvssV2AvailabilityImpact = cve?.impact?.baseMetricV2?.cvssV2?.availabilityImpact,
                        CvssV2BaseScore = cve?.impact?.baseMetricV2?.cvssV2?.baseScore
                    };

                    // Fix strings from JSON that won't match expected values
                    if (nvdData.CvssV3AttackVector == "ADJACENT_NETWORK") nvdData.CvssV3AttackVector = "ADJACENT";
                    if (nvdData.CvssV2AccessVector == "ADJACENT_NETWORK") nvdData.CvssV2AccessVector = "ADJACENTNETWORK";

                    data.Add(new object[] { nvdData });
                }
            }

            return data;
        }
    }
}
