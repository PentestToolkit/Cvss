using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Text;

namespace PentestToolkit.Cvss
{
    public class CvssV3TemporalScore : INotifyPropertyChanged
    {
        private double _baseScore;
        private CvssV3Enums.ExploitCodeMaturity _exploitCodeMaturity;
        private CvssV3Enums.RemediationLevel _remediationLevel;
        private CvssV3Enums.ReportConfidence _reportConfidence;

        public event PropertyChangedEventHandler PropertyChanged;

        public double BaseScore
        {
            get { return _baseScore; }
            set { if (value != _baseScore) { _baseScore = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public double Score => CalculateScore();

        public CvssV3Enums.ExploitCodeMaturity ExploitCodeMaturity
        {
            get { return _exploitCodeMaturity; }
            set { if (value != _exploitCodeMaturity) { _exploitCodeMaturity = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.RemediationLevel RemediationLevel
        {
            get { return _remediationLevel; }
            set { if (value != _remediationLevel) { _remediationLevel = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.ReportConfidence ReportConfidence
        {
            get { return _reportConfidence; }
            set { if (value != _reportConfidence) { _reportConfidence = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public static CvssV3TemporalScore FromCvssV2TemporalScore(CvssV2TemporalScore cvssV2TemporalScore)
        {
            var cvssV3TemporalScore = new CvssV3TemporalScore();

            switch (cvssV2TemporalScore.Exploitability)
            {
                case CvssV2Enums.Exploitability.NotDefined:
                    cvssV3TemporalScore.ExploitCodeMaturity = CvssV3Enums.ExploitCodeMaturity.NotDefined;
                    break;

                case CvssV2Enums.Exploitability.Unproven:
                    cvssV3TemporalScore.ExploitCodeMaturity = CvssV3Enums.ExploitCodeMaturity.Unproven;
                    break;

                case CvssV2Enums.Exploitability.ProofOfConcept:
                    cvssV3TemporalScore.ExploitCodeMaturity = CvssV3Enums.ExploitCodeMaturity.ProofOfConcept;
                    break;

                case CvssV2Enums.Exploitability.Functional:
                    cvssV3TemporalScore.ExploitCodeMaturity = CvssV3Enums.ExploitCodeMaturity.Functional;
                    break;

                case CvssV2Enums.Exploitability.High:
                    cvssV3TemporalScore.ExploitCodeMaturity = CvssV3Enums.ExploitCodeMaturity.High;
                    break;
            }

            switch (cvssV2TemporalScore.RemediationLevel)
            {
                case CvssV2Enums.RemediationLevel.NotDefined:
                    cvssV3TemporalScore.RemediationLevel = CvssV3Enums.RemediationLevel.NotDefined;
                    break;

                case CvssV2Enums.RemediationLevel.OfficialFix:
                    cvssV3TemporalScore.RemediationLevel = CvssV3Enums.RemediationLevel.OfficialFix;
                    break;

                case CvssV2Enums.RemediationLevel.TemporaryFix:
                    cvssV3TemporalScore.RemediationLevel = CvssV3Enums.RemediationLevel.TemporaryFix;
                    break;

                case CvssV2Enums.RemediationLevel.Workaround:
                    cvssV3TemporalScore.RemediationLevel = CvssV3Enums.RemediationLevel.Workaround;
                    break;

                case CvssV2Enums.RemediationLevel.Unavailable:
                    cvssV3TemporalScore.RemediationLevel = CvssV3Enums.RemediationLevel.Unavailable;
                    break;
            }

            switch (cvssV2TemporalScore.ReportConfidence)
            {
                case CvssV2Enums.ReportConfidence.NotDefined:
                    cvssV3TemporalScore.ReportConfidence = CvssV3Enums.ReportConfidence.NotDefined;
                    break;

                case CvssV2Enums.ReportConfidence.Confirmed:
                    cvssV3TemporalScore.ReportConfidence = CvssV3Enums.ReportConfidence.Confirmed;
                    break;

                case CvssV2Enums.ReportConfidence.Uncorroborated:
                    cvssV3TemporalScore.ReportConfidence = CvssV3Enums.ReportConfidence.Reasonable;
                    break;

                case CvssV2Enums.ReportConfidence.Unconfirmed:
                    cvssV3TemporalScore.ReportConfidence = CvssV3Enums.ReportConfidence.Unknown;
                    break;
            }

            return cvssV3TemporalScore;
        }

        public double CalculateScore()
        {
            if (BaseScore <= 0.0)
            {
                return BaseScore;
            }

            var temporalScore = BaseScore * CvssV3Weight.ExploitCodeMaturity[ExploitCodeMaturity] * CvssV3Weight.RemediationLevel[RemediationLevel] * CvssV3Weight.ReportConfidence[ReportConfidence];
            return Math.Ceiling(temporalScore * 10) / 10;
        }

        public string ToVectorString()
        {
            return ToVectorString(false);
        }

        public string ToVectorString(bool partial)
        {
            var builder = new StringBuilder();

            if (!partial)
            {
                builder.Append("CVSS:3.0");
            }
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ExploitCodeMaturity>.Write(ExploitCodeMaturity));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.RemediationLevel>.Write(RemediationLevel));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ReportConfidence>.Write(ReportConfidence));

            return builder.ToString();
        }

        private void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
