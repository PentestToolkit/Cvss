using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;

namespace PentestToolkit.Cvss
{
    internal class VectorStringParser<T> where T : struct, IComparable, IFormattable
    {
        internal static T Parse(string vectorString)
        {
            if (!typeof(T).GetTypeInfo().IsEnum)
            {
                throw new InvalidOperationException("T must be an enum type");
            }

            var name = typeof(T).GetTypeInfo().GetCustomAttribute<AbbreviationAttribute>()?.Value ?? typeof(T).Name;
            var valueNameToValueDictionary = new Dictionary<string, T>();
            foreach (var value in (T[])Enum.GetValues(typeof(T)))
            {
                foreach (var memberInfo in typeof(T).GetTypeInfo().DeclaredMembers)
                {
                    if (memberInfo.Name == "NotSpecified")
                    {
                        continue;
                    }

                    if (memberInfo.Name == value.ToString())
                    {
                        var valueName = memberInfo.GetCustomAttribute<AbbreviationAttribute>()?.Value ?? memberInfo.Name;
                        valueNameToValueDictionary.Add(valueName, value);
                        break;
                    }
                }
            }

            var regexBuilder = new StringBuilder();
            regexBuilder.Append("\\W");
            regexBuilder.Append(name);
            regexBuilder.Append(":");
            regexBuilder.Append("(");
            for (var i = 0; i < valueNameToValueDictionary.Count; i++)
            {
                regexBuilder.Append(valueNameToValueDictionary.ElementAt(i).Key);
                if (i != valueNameToValueDictionary.Count - 1)
                {
                    regexBuilder.Append("|");
                }
            }
            regexBuilder.Append(")");

            var matches = Regex.Matches(vectorString, regexBuilder.ToString());

            if (matches.Count == 1)
            {
                var matchValue = matches[0].Groups[1].Value;
                return valueNameToValueDictionary[matchValue];
            }

            return default;
        }
    }
}
