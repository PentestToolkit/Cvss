using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Text;

namespace PentestToolkit.Cvss
{
    public class CvssV2TemporalScore : INotifyPropertyChanged
    {
        private CvssV2Enums.Exploitability _exploitability;
        private CvssV2Enums.RemediationLevel _remediationLevel;
        private CvssV2Enums.ReportConfidence _reportConfidence;

        public event PropertyChangedEventHandler PropertyChanged;

        public double Score { get; }

        public CvssV2Enums.Exploitability Exploitability
        {
            get { return _exploitability; }
            set { if (value != _exploitability) { _exploitability = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV2Enums.RemediationLevel RemediationLevel
        {
            get { return _remediationLevel; }
            set { if (value != _remediationLevel) { _remediationLevel = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV2Enums.ReportConfidence ReportConfidence
        {
            get { return _reportConfidence; }
            set { if (value != _reportConfidence) { _reportConfidence = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public string ToVectorString()
        {
            return ToVectorString(false);
        }

        public string ToVectorString(bool partial)
        {
            var builder = new StringBuilder();

            if (!partial)
            {
                builder.Append("(");
            }
            builder.Append(VectorStringWriter<CvssV2Enums.Exploitability>.Write(Exploitability));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.RemediationLevel>.Write(RemediationLevel));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.ReportConfidence>.Write(ReportConfidence));
            if (!partial)
            {
                builder.Append(")");
            }

            return builder.ToString();
        }

        private void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
