using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Text;

namespace PentestToolkit.Cvss
{
    public class CvssV3EnvironmentalScore : INotifyPropertyChanged
    {
        private CvssV3Enums.AvailabilityRequirement _availabilityRequirement;
        private CvssV3Enums.ConfidentialityRequirement _confidentialityRequirement;
        private CvssV3Enums.IntegrityRequirement _integrityRequirement;
        private CvssV3Enums.ModifiedAttackComplexity _modifiedAttackComplexity;
        private CvssV3Enums.ModifiedAttackVector _modifiedAttackVector;
        private CvssV3Enums.ModifiedAvailability _modifiedAvailability;
        private CvssV3Enums.ModifiedConfidentiality _modifiedConfidentiality;
        private CvssV3Enums.ModifiedIntegrity _modifiedIntegrity;
        private CvssV3Enums.ModifiedPrivilegesRequired _modifiedPrivilegesRequired;
        private CvssV3Enums.ModifiedScope _modifiedScope;
        private CvssV3Enums.ModifiedUserInteraction _modifiedUserInteraction;

        public event PropertyChangedEventHandler PropertyChanged;

        public double Score { get; }

        public CvssV3Enums.AvailabilityRequirement AvailabilityRequirement
        {
            get { return _availabilityRequirement; }
            set { if (value != _availabilityRequirement) { _availabilityRequirement = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.ConfidentialityRequirement ConfidentialityRequirement
        {
            get { return _confidentialityRequirement; }
            set { if (value != _confidentialityRequirement) { _confidentialityRequirement = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.IntegrityRequirement IntegrityRequirement
        {
            get { return _integrityRequirement; }
            set { if (value != _integrityRequirement) { _integrityRequirement = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.ModifiedAttackComplexity ModifiedAttackComplexity
        {
            get { return _modifiedAttackComplexity; }
            set { if (value != _modifiedAttackComplexity) { _modifiedAttackComplexity = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.ModifiedAttackVector ModifiedAttackVector
        {
            get { return _modifiedAttackVector; }
            set { if (value != _modifiedAttackVector) { _modifiedAttackVector = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.ModifiedAvailability ModifiedAvailability
        {
            get { return _modifiedAvailability; }
            set { if (value != _modifiedAvailability) { _modifiedAvailability = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.ModifiedConfidentiality ModifiedConfidentiality
        {
            get { return _modifiedConfidentiality; }
            set { if (value != _modifiedConfidentiality) { _modifiedConfidentiality = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.ModifiedIntegrity ModifiedIntegrity
        {
            get { return _modifiedIntegrity; }
            set { if (value != _modifiedIntegrity) { _modifiedIntegrity = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.ModifiedPrivilegesRequired ModifiedPrivilegesRequired
        {
            get { return _modifiedPrivilegesRequired; }
            set { if (value != _modifiedPrivilegesRequired) { _modifiedPrivilegesRequired = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.ModifiedScope ModifiedScope
        {
            get { return _modifiedScope; }
            set { if (value != _modifiedScope) { _modifiedScope = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV3Enums.ModifiedUserInteraction ModifiedUserInteraction
        {
            get { return _modifiedUserInteraction; }
            set { if (value != _modifiedUserInteraction) { _modifiedUserInteraction = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public string ToVectorString()
        {
            return ToVectorString(false);
        }

        public string ToVectorString(bool partial)
        {
            var builder = new StringBuilder();

            if (!partial)
            {
                builder.Append("CVSS:3.0");
            }
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ConfidentialityRequirement>.Write(ConfidentialityRequirement));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.IntegrityRequirement>.Write(IntegrityRequirement));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.AvailabilityRequirement>.Write(AvailabilityRequirement));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedAttackVector>.Write(ModifiedAttackVector));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedAttackComplexity>.Write(ModifiedAttackComplexity));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedPrivilegesRequired>.Write(ModifiedPrivilegesRequired));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedUserInteraction>.Write(ModifiedUserInteraction));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedScope>.Write(ModifiedScope));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedConfidentiality>.Write(ModifiedConfidentiality));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedIntegrity>.Write(ModifiedIntegrity));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedAvailability>.Write(ModifiedAvailability));

            return builder.ToString();
        }

        private void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
