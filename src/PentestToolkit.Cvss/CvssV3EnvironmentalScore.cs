using System.Text;

namespace PentestToolkit.Cvss
{
    public class CvssV3EnvironmentalScore
    {
        public CvssV3Enums.AvailabilityRequirement AvailabilityRequirement { get; set; }
        public CvssV3Enums.ConfidentialityRequirement ConfidentialityRequirement { get; set; }
        public CvssV3Enums.IntegrityRequirement IntegrityRequirement { get; set; }
        public CvssV3Enums.ModifiedAttackComplexity ModifiedAttackComplexity { get; set; }
        public CvssV3Enums.ModifiedAttackVector ModifiedAttackVector { get; set; }
        public CvssV3Enums.ModifiedAvailability ModifiedAvailability { get; set; }
        public CvssV3Enums.ModifiedConfidentiality ModifiedConfidentiality { get; set; }
        public CvssV3Enums.ModifiedIntegrity ModifiedIntegrity { get; set; }
        public CvssV3Enums.ModifiedPrivilegesRequired ModifiedPrivilegesRequired { get; set; }
        public CvssV3Enums.ModifiedScope ModifiedScope { get; set; }
        public CvssV3Enums.ModifiedUserInteraction ModifiedUserInteraction { get; set; }

        public string ToVectorString()
        {
            return ToVectorString(false);
        }

        public string ToVectorString(bool partial)
        {
            var builder = new StringBuilder();

            if (!partial)
            {
                builder.Append("CVSS:3.0");
            }
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ConfidentialityRequirement>.Write(ConfidentialityRequirement));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.IntegrityRequirement>.Write(IntegrityRequirement));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.AvailabilityRequirement>.Write(AvailabilityRequirement));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedAttackVector>.Write(ModifiedAttackVector));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedAttackComplexity>.Write(ModifiedAttackComplexity));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedPrivilegesRequired>.Write(ModifiedPrivilegesRequired));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedUserInteraction>.Write(ModifiedUserInteraction));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedScope>.Write(ModifiedScope));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedConfidentiality>.Write(ModifiedConfidentiality));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedIntegrity>.Write(ModifiedIntegrity));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV3Enums.ModifiedAvailability>.Write(ModifiedAvailability));

            return builder.ToString();
        }
    }
}
