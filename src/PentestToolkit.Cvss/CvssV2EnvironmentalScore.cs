using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Text;

namespace PentestToolkit.Cvss
{
    public class CvssV2EnvironmentalScore : INotifyPropertyChanged
    {
        private CvssV2Enums.AvailabilityRequirement _availabilityRequirement;
        private CvssV2Enums.CollateralDamagePotential _collateralDamagePotential;
        private CvssV2Enums.ConfidentialityRequirement _confidentialityRequirement;
        private CvssV2Enums.IntegrityRequirement _integrityRequirement;
        private CvssV2Enums.TargetDistribution _targetDistribution;

        public event PropertyChangedEventHandler PropertyChanged;

        public double Score { get; }

        public CvssV2Enums.AvailabilityRequirement AvailabilityRequirement
        {
            get { return _availabilityRequirement; }
            set { if (value != _availabilityRequirement) { _availabilityRequirement = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV2Enums.CollateralDamagePotential CollateralDamagePotential
        {
            get { return _collateralDamagePotential; }
            set { if (value != _collateralDamagePotential) { _collateralDamagePotential = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV2Enums.ConfidentialityRequirement ConfidentialityRequirement
        {
            get { return _confidentialityRequirement; }
            set { if (value != _confidentialityRequirement) { _confidentialityRequirement = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV2Enums.IntegrityRequirement IntegrityRequirement
        {
            get { return _integrityRequirement; }
            set { if (value != _integrityRequirement) { _integrityRequirement = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public CvssV2Enums.TargetDistribution TargetDistribution
        {
            get { return _targetDistribution; }
            set { if (value != _targetDistribution) { _targetDistribution = value; NotifyPropertyChanged(); NotifyPropertyChanged(nameof(Score)); } }
        }

        public string ToVectorString()
        {
            return ToVectorString(false);
        }

        public string ToVectorString(bool partial)
        {
            var builder = new StringBuilder();

            if (!partial)
            {
                builder.Append("(");
            }
            builder.Append(VectorStringWriter<CvssV2Enums.CollateralDamagePotential>.Write(CollateralDamagePotential));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.TargetDistribution>.Write(TargetDistribution));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.ConfidentialityRequirement>.Write(ConfidentialityRequirement));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.IntegrityRequirement>.Write(IntegrityRequirement));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.AvailabilityRequirement>.Write(AvailabilityRequirement));
            if (!partial)
            {
                builder.Append(")");
            }

            return builder.ToString();
        }

        private void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
