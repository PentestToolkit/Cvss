using System.Text;

namespace PentestToolkit.Cvss
{
    public class CvssV2EnvironmentalScore
    {
        public CvssV2Enums.AvailabilityRequirement AvailabilityRequirement { get; set; }
        public CvssV2Enums.CollateralDamagePotential CollateralDamagePotential { get; set; }
        public CvssV2Enums.ConfidentialityRequirement ConfidentialityRequirement { get; set; }
        public CvssV2Enums.IntegrityRequirement IntegrityRequirement { get; set; }
        public CvssV2Enums.TargetDistribution TargetDistribution { get; set; }

        public string ToVectorString()
        {
            return ToVectorString(false);
        }

        public string ToVectorString(bool partial)
        {
            var builder = new StringBuilder();

            if (!partial)
            {
                builder.Append("(");
            }
            builder.Append(VectorStringWriter<CvssV2Enums.CollateralDamagePotential>.Write(CollateralDamagePotential));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.TargetDistribution>.Write(TargetDistribution));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.ConfidentialityRequirement>.Write(ConfidentialityRequirement));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.IntegrityRequirement>.Write(IntegrityRequirement));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.AvailabilityRequirement>.Write(AvailabilityRequirement));
            if (!partial)
            {
                builder.Append(")");
            }

            return builder.ToString();
        }
    }
}
