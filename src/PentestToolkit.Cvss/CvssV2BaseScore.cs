using System;
using System.Text;

namespace PentestToolkit.Cvss
{
    public class CvssV2BaseScore
    {
        public double BaseScore => CalculateBaseScore();
        public CvssV2Enums.AccessComplexity AccessComplexity { get; set; }

        public CvssV2Enums.AccessVector AccessVector { get; set; }

        public CvssV2Enums.Authentication Authentication { get; set; }

        public CvssV2Enums.AvailabilityImpact AvailabilityImpact { get; set; }

        public CvssV2Enums.ConfidentialityImpact ConfidentialityImpact { get; set; }

        public CvssV2Enums.IntegrityImpact IntegrityImpact { get; set; }

        public static CvssV2BaseScore FromVectorString(string vectorString)
        {
            vectorString = vectorString ?? throw new ArgumentNullException(nameof(vectorString));
            if (string.IsNullOrWhiteSpace(vectorString))
            {
                throw new ArgumentException("Not a valid CVSS V3 vector string, invalid format", nameof(vectorString));
            }

            var cvssV2BaseScore = new CvssV2BaseScore
            {
                AccessVector = VectorStringParser<CvssV2Enums.AccessVector>.Parse(vectorString),
                AccessComplexity = VectorStringParser<CvssV2Enums.AccessComplexity>.Parse(vectorString),
                Authentication = VectorStringParser<CvssV2Enums.Authentication>.Parse(vectorString),
                ConfidentialityImpact = VectorStringParser<CvssV2Enums.ConfidentialityImpact>.Parse(vectorString),
                IntegrityImpact = VectorStringParser<CvssV2Enums.IntegrityImpact>.Parse(vectorString),
                AvailabilityImpact = VectorStringParser<CvssV2Enums.AvailabilityImpact>.Parse(vectorString),
            };

            var hasAllRequiredValues = true;
            hasAllRequiredValues = hasAllRequiredValues && cvssV2BaseScore.AccessVector != CvssV2Enums.AccessVector.NotSpecified;
            hasAllRequiredValues = hasAllRequiredValues && cvssV2BaseScore.AccessComplexity != CvssV2Enums.AccessComplexity.NotSpecified;
            hasAllRequiredValues = hasAllRequiredValues && cvssV2BaseScore.Authentication != CvssV2Enums.Authentication.NotSpecified;
            hasAllRequiredValues = hasAllRequiredValues && cvssV2BaseScore.ConfidentialityImpact != CvssV2Enums.ConfidentialityImpact.NotSpecified;
            hasAllRequiredValues = hasAllRequiredValues && cvssV2BaseScore.IntegrityImpact != CvssV2Enums.IntegrityImpact.NotSpecified;
            hasAllRequiredValues = hasAllRequiredValues && cvssV2BaseScore.AvailabilityImpact != CvssV2Enums.AvailabilityImpact.NotSpecified;

            if (!hasAllRequiredValues)
            {
                throw new ArgumentException("Not a valid CVSS V2 vector string, missing required metric", nameof(vectorString));
            }

            return cvssV2BaseScore;
        }

        public string ToVectorString()
        {
            return ToVectorString(false);
        }

        public string ToVectorString(bool partial)
        {
            var builder = new StringBuilder();

            if (!partial)
            {
                builder.Append("(");
            }
            builder.Append(VectorStringWriter<CvssV2Enums.AccessVector>.Write(AccessVector));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.AccessComplexity>.Write(AccessComplexity));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.Authentication>.Write(Authentication));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.ConfidentialityImpact>.Write(ConfidentialityImpact));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.IntegrityImpact>.Write(IntegrityImpact));
            builder.Append("/");
            builder.Append(VectorStringWriter<CvssV2Enums.AvailabilityImpact>.Write(AvailabilityImpact));
            if (!partial)
            {
                builder.Append(")");
            }

            return builder.ToString();
        }

        internal double CalculateBaseScore()
        {
            var hasAllRequiredValues = true;
            hasAllRequiredValues = hasAllRequiredValues && AccessVector != CvssV2Enums.AccessVector.NotSpecified;
            hasAllRequiredValues = hasAllRequiredValues && AccessComplexity != CvssV2Enums.AccessComplexity.NotSpecified;
            hasAllRequiredValues = hasAllRequiredValues && Authentication != CvssV2Enums.Authentication.NotSpecified;
            hasAllRequiredValues = hasAllRequiredValues && ConfidentialityImpact != CvssV2Enums.ConfidentialityImpact.NotSpecified;
            hasAllRequiredValues = hasAllRequiredValues && IntegrityImpact != CvssV2Enums.IntegrityImpact.NotSpecified;
            hasAllRequiredValues = hasAllRequiredValues && AvailabilityImpact != CvssV2Enums.AvailabilityImpact.NotSpecified;

            if (!hasAllRequiredValues)
            {
                return -1.0;
            }

            var impactSubScore = 10.41 * (1 - ((1 - CvssV2Weight.Impact[ConfidentialityImpact]) * (1 - CvssV2Weight.Impact[IntegrityImpact]) * (1 - CvssV2Weight.Impact[AvailabilityImpact])));
            var exploitabilitySubScore = 20 * CvssV2Weight.AccessVector[AccessVector] * CvssV2Weight.AccessComplexity[AccessComplexity] * CvssV2Weight.Authentication[Authentication];
            var fImpact = (impactSubScore == 0) ? 0 : 1.176;
            return Math.Round(((0.6 * impactSubScore) + (0.4 * exploitabilitySubScore) - 1.5) * fImpact, 1);
        }
    }
}
